version: "3"

networks:
  gitea:
    name: gitea

volumes:
  gitea:
  gitea-config:
  postgresql:
  drone:
  drone-agent:
  mkcert-data:
    external: true

services:
  reverseproxy:
    build:
      context: .
      dockerfile: nginx.Dockerfile
    ports:
      - "8443:8443"
    volumes:
      - mkcert-data:/tmp-certs
    restart: always
    networks:
      - gitea

  server:
    build:
      context: .
      dockerfile: gitea.Dockerfile
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - ROOT_URL=${GITEA_ROOT_URL}
      - DOMAIN=${GITEA_DOMAIN}
      - SSH_DOMAIN=${GITEA_SSH_DOMAIN}
      - DB_TYPE=postgres
      - DB_HOST=${GITEA_DB_HOST}
      - DB_NAME=${GITEA_DB_NAME}
      - DB_USER=${GITEA_DB_USER}
      - DB_PASSWD=${GITEA_DB_PASSWD}
      - PROTOCOL=https
      - CERT_FILE=${GITEA_CERT_FILE}
      - KEY_FILE=${GITEA_KEY_FILE}
      - HTTP_PORT=443
      - SSH_PORT=2222
      - ALLOWED_HOST_LIST=${GITEA_ALLOWED_HOST_LIST}
    restart: always
    networks:
      - gitea
    volumes:
      - gitea-config:/data
      - gitea:/app/gitea/data
      - mkcert-data:/tmp-certs
      - mkcert-data:/root/.local/share/mkcert/
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "443:443"
      - "2222:2222"
    depends_on:
      - gitea-db

  gitea-db:
    image: postgres:13
    restart: always
    environment:
      - POSTGRES_USER=${GITEA_DB_USER}
      - POSTGRES_PASSWORD=${GITEA_DB_PASSWD}
      - POSTGRES_DB=${GITEA_DB_NAME}
    networks:
      - gitea
    volumes:
      - postgresql:/var/lib/postgresql/data

  plantuml-server:
    image: plantuml/plantuml-server:jetty
    container_name: plantuml-server
    restart: always
    networks:
      - gitea
    depends_on:
      - reverseproxy

  drone-server:
    build:
      context: .
      dockerfile: drone.Dockerfile
    container_name: drone-server
    ports:
      - 4005:443
      - 9000
    volumes:
      - drone:/var/lib/drone/
      - mkcert-data:/tmp-certs
      - mkcert-data:/root/.local/share/mkcert/
    restart: always
    depends_on:
      - server
    environment:
      - DRONE_OPEN=true
      - DRONE_GITEA=true
      - DRONE_NETWORK=gitea
      - DRONE_DEBUG=true
      - DRONE_ADMIN=${DRONE_ADMIN}
      - DRONE_USER_CREATE=${DRONE_USER_CREATE}
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - DRONE_SERVER_PORT=:80
      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgres://gitea:gitea@gitea-db:5432/postgres?sslmode=disable
      - DRONE_GITEA_SERVER=${GITEA_ROOT_URL}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_HOST=${DRONE_HOST}
      - DRONE_TLS_CERT=${GITEA_CERT_FILE}
      - DRONE_TLS_KEY=${GITEA_KEY_FILE}
      - DRONE_SERVER_PROTO=https
      - DRONE_AGENTS_ENABLED=true
    networks:
      - gitea

  drone-agent:
    build:
      context: .
      dockerfile: drone-agent.Dockerfile
    container_name: drone-agent
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - drone-agent:/data
      - mkcert-data:/tmp-certs
      - mkcert-data:/root/.local/share/mkcert/
    environment:
      - DRONE_RPC_SERVER=${DRONE_HOST}
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET}
      - DRONE_RUNNER_CAPACITY=1
      - DRONE_RUNNER_NETWORKS=gitea
      - DRONE_RUNNER_ENVIRON=GIT_SSL_NO_VERIFY:true
    networks:
      - gitea
